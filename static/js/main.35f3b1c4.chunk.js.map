{"version":3,"sources":["Button.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","onClick","sign","updateCount","App","state","count","isLoaded","error","fetch","config","BACKEND_URL","then","res","console","log","json","result","setState","parseInt","value","catch","err","this","requestOptions","method","headers","body","JSON","stringify","counter","prevState","message","handleCount","bind","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAEaA,EAAS,SAACC,GACnB,OACI,wBAAQC,QAAS,iBACE,MAAfD,EAAME,KAAeF,EAAMG,YAAY,GAAKH,EAAMG,aAAa,IADnE,SAEKH,EAAME,Q,OC+DJE,E,kDA7DX,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IACDK,MAAQ,CACTC,MAAO,EACPC,UAAU,EACVC,MAAO,MALI,E,iEAUG,IAAD,OACjBC,MAAMC,EAAOC,YAAc,UACtBC,MAAK,SAAAC,GAA0B,OAAlBC,QAAQC,IAAIF,GAAaA,KACtCD,MAAK,SAAAC,GAAG,OAAIA,EAAIG,UAChBJ,MAAK,SAAAK,GACF,EAAKC,SAAS,CACVX,UAAU,EACVD,MAAOa,SAASF,EAAOG,YAG9BC,OAAM,SAAAC,GACH,EAAKJ,SAAS,CACVX,UAAU,EACVC,MAAOc,S,kCAKXF,GAAQ,IAAD,OACfN,QAAQC,IAAIQ,KAAKlB,OACjB,IAAMmB,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEC,QAASP,KAAKlB,MAAMC,MAAQ,KAEvDG,MAAMC,EAAOC,YAAc,SAAUa,GAChCZ,MAAK,WACF,EAAKM,UAAS,SAACa,GAAD,MAAgB,CAACzB,MAAOyB,EAAUzB,MAAQ,SAE3De,MAAMP,QAAQN,S,+BAGb,IAAD,EAC8Be,KAAKlB,MAAhCC,EADH,EACGA,MAAOC,EADV,EACUA,SAAUC,EADpB,EACoBA,MAEzB,OAAIA,EACQ,0CAAaA,EAAMwB,WACnBzB,EAIJ,kDACoBD,EAChB,uBACA,cAAC,EAAD,CAAQJ,KAAK,IAAII,MAAOA,EAAOH,YAAaoB,KAAKU,YAAYC,KAAKX,WANlE,gD,GAlDFY,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.35f3b1c4.chunk.js","sourcesContent":["    import React from 'react';\r\n\r\nexport const Button = (props) => {\r\n    return (\r\n        <button onClick={() =>\r\n            props.sign === \"+\" ? props.updateCount(1) : props.updateCount(-1)} >\r\n            {props.sign}\r\n        </button>\r\n    );\r\n}","import React, {Component} from 'react';\n\nimport {Button} from './Button';\n\nimport config from './config.json';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 0,\n            isLoaded: false,\n            error: null\n        }\n\n    }\n\n    componentWillMount() {\n        fetch(config.BACKEND_URL + \"/count\")\n            .then(res => {console.log(res); return res})\n            .then(res => res.json())\n            .then(result => {\n                this.setState({\n                    isLoaded: true,\n                    count: parseInt(result.value)\n                })\n            })\n            .catch(err => {\n                this.setState({\n                    isLoaded: true,\n                    error: err\n                })\n            })\n    }\n\n    handleCount(value) {\n        console.log(this.state)\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ counter: this.state.count + 1 })\n        };\n        fetch(config.BACKEND_URL + '/count', requestOptions)\n            .then(() => {\n                this.setState((prevState) => ({count: prevState.count + 1}));\n            })\n            .catch(console.error)\n    }\n\n    render() {\n        const { count, isLoaded, error } = this.state;\n\n        if (error) {\n            return (<div>Error: {error.message}</div>);\n        } else if (!isLoaded) {\n            return (<div>Loading..</div>);\n        } else {\n            return (\n                <div>\n                    Current count: {count}\n                    <hr/>\n                    <Button sign=\"+\" count={count} updateCount={this.handleCount.bind(this)}/>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}